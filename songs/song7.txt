#lang racket

(define (make-tree value left right) (list value left right))
(define (value tree) (car tree))
(define (left tree)  (cadr  tree))
(define (right tree) (caddr  tree))
(define empty-tree? null?)

(define example
  (make-tree '+
             (make-tree '*
                        (make-tree '-
                                   (make-tree 0 '() '())
                                   (make-tree 2 '() '()))
                        (make-tree 3 '() '()))
             (make-tree '*
                        (make-tree '-
                                   (make-tree 4 '() '())
                                   (make-tree 5 '() '()))
                        (make-tree '1/
                                   '()
                                   (make-tree 6 '() '())))))

(define example-no-unary
  (make-tree '+
             (make-tree '*
                        (make-tree '-
                                   (make-tree 0 '() '())
                                   (make-tree 2 '() '()))
                        (make-tree 3 '() '()))
             (make-tree '*
                        (make-tree '-
                                   (make-tree 4 '() '())
                                   (make-tree 5 '() '()))
                        (make-tree 1 '() '()))))

(define example-plus (make-tree '+
                                (make-tree 1 '() '())
                                (make-tree 2 '() '())))

(define example-mult (make-tree '*
                                (make-tree 3 '() '())
                                (make-tree 2 '() '())))

;;;; 1
(define (apt-value t)
  (if (empty-tree? t)
      #f
      (let ((v (value t)) (l (left t)) (r (right t)))
        (cond ((and (empty-tree? l) (empty-tree? r)) v)
              ((eq? '+ v) (+ (apt-value l) (apt-value r)))
              ((eq? '* v) (* (apt-value l) (apt-value r)))
              ((eq? '- v) (- (apt-value l) (apt-value r)))
              ((eq? '1/ v) (/ 1 (apt-value r)))
              (else v)))))

;(= 3 (apt-value example-plus))
;(= 6 (apt-value example-mult))
;(= -7 (apt-value example-no-unary))
;(= -37/6 (apt-value example))

;;;; 2a
(define (extract-preorder t)
  (if (empty-tree? t)
      #f
      (let ((v (value t)) (l (left t)) (r (right t)))
        (cond ((and (empty-tree? l) (empty-tree? r)) (list v))
              ((or (eq? '+ v)
                   (eq? '* v)
                   (eq? '- v)) (append (list v) (extract-preorder l) (extract-preorder r)))
              ((eq? '1/ v) (append (list v) (extract-preorder r)))
              (else (list v))))))

;(extract-preorder example-plus)
;(extract-preorder example-mult)
;(extract-preorder example-no-unary)
;(extract-preorder example)

;;;; 2b
(define (extract-postorder t)
  (if (empty-tree? t)
      #f
      (let ((v (value t)) (l (left t)) (r (right t)))
        (cond ((and (empty-tree? l) (empty-tree? r)) (list v))
              ((or (eq? '+ v)
                   (eq? '* v)
                   (eq? '- v)) (append (extract-postorder l) (extract-postorder r) (list v)))
              ((eq? '1/ v) (append (extract-postorder r) (list v)))
              (else (list v))))))

;(extract-postorder example-plus)
;(extract-postorder example-mult)
;(extract-postorder example-no-unary)
;(extract-postorder example)

;;;; 2c
(define (extract-inorder t)
  (if (empty-tree? t)
      #f
      (let ((v (value t)) (l (left t)) (r (right t)))
        (cond ((and (empty-tree? l) (empty-tree? r)) (list v))
              ((or (eq? '+ v)
                   (eq? '* v)
                   (eq? '- v)) (append (extract-inorder l)  (list v) (extract-inorder r)))
              ((eq? '1/ v) (append (list v) (extract-inorder r)))
              (else (list v))))))

;(extract-inorder example-plus)
;(extract-inorder example-mult)
;(extract-inorder example-no-unary)
;(extract-inorder example)

;;;; 2d
(define (extract-infix-unique t)
  (if (empty-tree? t)
      #f
      (let ((v (value t)) (l (left t)) (r (right t)))
        (cond ((and (empty-tree? l) (empty-tree? r)) v)
              ((or (eq? '+ v)
                   (eq? '* v)
                   (eq? '- v)) (list (extract-infix-unique l) v (extract-infix-unique r)))
              ((eq? '1/ v) (list '1/ (extract-infix-unique r)))
              (else v)))))

;(extract-infix-unique example-plus)
;(extract-infix-unique example-mult)
;(extract-infix-unique example-no-unary)
;(extract-infix-unique example)

(define bst-example (make-tree 50
                               (make-tree 30
                                          (make-tree 10 '() '())
                                          (make-tree 40 '() '()))
                               (make-tree 70
                                          (make-tree 60 '() '())
                                          (make-tree 80
                                                     (make-tree 75 '() '())
                                                     '()))))

(define bst-small-example (make-tree 30
                                     (make-tree 12 null null)
                                     (make-tree 40 null null)))

;;;; 3a
(define (bst-element? item bst same? less-than?)
  (if (empty-tree? bst)
      #f
      (let ((v (value bst)))
        (cond ((same? item v) #t)
              ((less-than? item v) (bst-element? item (left bst) same? less-than?))
              (else (bst-element? item (right bst) same? less-than?))))))

;(bst-element? 10 bst-example = <)
;(bst-element? 75 bst-example = <)
;(bst-element? 60 bst-example = <)
;(not (bst-element? 65 bst-example = <))

;;;; 3b
(define (bst-insert item bst same? less-than?)
  (if (empty-tree? bst)
      (make-tree item null null)
      (let ((v (value bst)))
        (if (same? item v)
            bst
            (if (less-than? item v)
                (make-tree v
                           (bst-insert item (left bst) same? less-than?)
                           (right bst))
                (make-tree v
                           (left bst)
                           (bst-insert item (right bst) same? less-than?)))))))

;(bst-insert 1 '() = <)
;(bst-insert 35 bst-small-example = <)
;(bst-insert 15 bst-small-example = <)
;(bst-insert 5 bst-small-example = <)
;(bst-insert 1 (bst-insert 5 bst-small-example = <) = <)
;(bst-insert 1 (bst-insert 12 bst-small-example = <) = <)

;;;; 3c
(define (bst-smallest bst)
  (if (empty-tree? bst)
      #f
      (let ((l (left bst)))
        (if (null? l)
            (value bst)
            (bst-smallest l)))))

;(= 12 (bst-smallest bst-small-example))
;(= 10 (bst-smallest bst-example))

;;;; 3d
(define (bst-largest bst)
  (if (empty-tree? bst)
      #f
      (let ((r (right bst)))
        (if (null? r)
            (value bst)
            (bst-largest r)))))

;(= 40 (bst-largest bst-small-example))
;(= 80 (bst-largest bst-example))

;;;; 3e
(define (bst-equal? x y same?)
  (if (and (null? x) (null? y))
      #t
      (if (or (null? x) (null? y))
          #f
          (and (same? (value x) (value y))
               (bst-equal? (left x) (left y) same?)
               (bst-equal? (right x) (right y) same?)))))

;(eq? #f (bst-equal? bst-small-example '() =))
;(eq? #t (bst-equal? bst-small-example bst-small-example =))

;;;; 4a
(define (bst-subset? small big same? less-than?)
  (if (empty-tree? small)
      #t
      (if (empty-tree? big)
          #f
          (and (bst-element? (value small) big same? less-than?)
               (bst-subset? (left small) big same? less-than?)
               (bst-subset? (right small) big same? less-than?)))))
               
;; 4a test
(define bst-example-51749 (foldl (lambda (item bst) (bst-insert item bst = <))
                                 '()
                                 '(5 1 7 4 9)))

(define bst-example-5174 (foldl (lambda (item bst) (bst-insert item bst = <))
                                '()
                                '(5 1 7 4)))

(define bst-example-5176 (foldl (lambda (item bst) (bst-insert item bst = <))
                                '()
                                '(5 1 7 6)))

;(bst-subset? bst-example-51749 bst-example-51749 = <)
;(bst-subset? null bst-example-51749 = <)
;(not (bst-subset? bst-example-5176 bst-example-51749 = <))
;(not (bst-subset? bst-example-51749 bst-example-5174 = <))

;;;; 4b
(define (bst-set-difference x y same? less-than?)
  (if (empty-tree? x)
      #t
      (if (empty-tree? y)
          #t
          (and (not (bst-element? (value x) y same? less-than?))
               (bst-set-difference (left x) y same? less-than?)
               (bst-set-difference (right x) y same? less-than?)))))

;;; 4b test
(define bst-example-382 (foldl (lambda (item bst) (bst-insert item bst = <))
                                '()
                                '(3 8 2)))

;(bst-set-difference bst-example-382 bst-example-51749 = <)
;(bst-set-difference null bst-example-51749 = <)
;(bst-set-difference null null = <)

(define bst-example-283 (foldl (lambda (item bst) (bst-insert item bst = <))
                                '()
                                '(2 8 3)))

;;;; 4c
(define (bst-set-equal? x y same? less-than?)
  (and (bst-subset? x y same? less-than?)
       (bst-subset? y x same? less-than?)))

;(bst-set-equal? null null = <)
;(bst-set-equal? bst-example-382 bst-example-283 = <)
;(not (bst-set-equal? bst-example-382 bst-example-51749 = <))

;;;; 5a
(define (bst-delete-min bst)
  (if (empty-tree? bst)
      null
      (if (empty-tree? (left bst))
          (right bst)
          (make-tree (value bst)
                     (bst-delete-min (left bst))
                     (right bst)))))

;(not (bst-element? 2 (bst-delete-min bst-example-382) = <))
;(not (bst-element? 2 (bst-delete-min bst-example-283) = <))
;(not (bst-element? 1 (bst-delete-min bst-example-51749) = <))

(define (bst-delete-max bst)
  (if (empty-tree? bst)
      null
      (if (empty-tree? (right bst))
          (left bst)
          (make-tree (value bst)
                     (left bst)
                     (bst-delete-max (right bst))))))

;(not (bst-element? 8 (bst-delete-max bst-example-382) = <))
;(not (bst-element? 8 (bst-delete-max bst-example-283) = <))
;(not (bst-element? 9 (bst-delete-max bst-example-51749) = <))

(define (bst-delete1 val bst same? less-than?)
  (cond ((null? val) bst)
        ((empty-tree? bst) bst)
        ((same? (value bst) val)
         (make-tree (bst-largest (left bst))
                    (bst-delete-max (left bst))
                    (right bst)))
        ((less-than? (value bst) val)
         (make-tree (value bst)
                    (bst-delete val (left bst) same? less-than?)
                    (right bst)))
        (else
         (make-tree (value bst)
                    (left bst)
                    (bst-delete val (right bst) same? less-than?)))))

(define (bst-delete val bst same? less-than?)
  (if (empty-tree? bst)
      bst
      (let ((v (value bst)) (l (left bst)) (r (right bst)))
        (cond ((and (same? val v) (empty-tree? l) (empty-tree? r)) null)
              ((and (same? val v) (empty-tree? r)) l)
              ((and (same? val v) (empty-tree? l)) r)
              ((same? val v) (make-tree (bst-largest (left bst))
                                        (bst-delete-max (left bst))
                                        (right bst)))
              ((less-than? val v) (make-tree v (bst-delete val l same? less-than?) r))
              (else (make-tree v l (bst-delete val r same? less-than?)))))))

(bst-delete 2 bst-example-382 = <)
(bst-delete 5 bst-example-51749 = <)
(bst-delete 4 bst-example-51749 = <)
(bst-delete 9 bst-example-51749 = <)
(bst-delete 1 bst-example-51749 = <)
